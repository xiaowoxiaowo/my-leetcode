/***
 * leetcode 375. 猜数字大小 II
 * 
 * 我们正在玩一个猜数游戏，游戏规则如下：
 * 我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。
 * 每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。
 * 然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。
 * 
 * n = 10, 我选择了8.
 * 第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
 * 第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
 * 第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。
 * 
 * 游戏结束。8 就是我选的数字。
 * 你最终要支付 5 + 7 + 9 = 21 块钱。
 * 
 * 给定 n ≥ 1，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。
 * 
 */

 // 最优策略不是最多猜测次数最小的策略，如果是最多猜测次数最小的策略，那就是二分法没错。可题目的意思是至多花费的钱最少的策略，详细来说，
 // 对于一个猜测策略，最终答案的不同会产生不同的花费，所有的这些花费中的最大值就是该策略最坏情况下的花费，
 // 题目需要你找到一种策略，使得这种策略在最坏情况下的花费是所有策略中最少的，这就是所谓的“极小化极大问题”，可能有点难理解，
 // 多加思考还是可以明白这题和二分查找有本质的区别。

var getMoneyAmount = function(n) {
  // 状态定义 dp[x][y] => 猜从 x -> y 要的最小代价
  let dp = Array.from(new Array(n + 1), ()=> new Array(n + 1).fill(Number.MAX_SAFE_INTEGER));
  // 初始化状态
  dp[0][1] = 0;
  for(let i = 0; i <= n; i++){
    dp[i][i] = 0;
  }
  // 状态转移
  // 猜从 1 -> i 的值设为 x 有3种可能
  // 1 x是答案, 2 小于x -> x + dp[0][x - 1],    3 大于x -> x + dp[x + 1][n];
  for(let x = n; x >= 0; x--){
    for(let y = x; y <= n; y++){
      for(let k = x + 1; k < y; k++){
        dp[x][y] = Math.min(dp[x][y], Math.max(dp[x][k - 1], dp[k + 1][y]) + k)
      }
    }
  }

  return dp[0][n];
};
