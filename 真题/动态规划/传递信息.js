/***
 * LCP 07. 传递信息
 * 
 * 小朋友 A 在和 ta 的小伙伴们玩传信息游戏，游戏规则如下：
 * 
 * 1.有 n 名玩家，所有玩家编号分别为 0 ～ n-1，其中小朋友 A 的编号为 0
 * 2.每个玩家都有固定的若干个可传信息的其他玩家（也可能没有）。传信息的关系是单向的（比如 A 可以向 B 传信息，但 B 不能向 A 传信息）。
 * 3.每轮信息必须需要传递给另一个人，且信息可重复经过同一个人
 * 
 * 给定总玩家数 n，以及按 [玩家编号,对应可传递玩家编号] 关系组成的二维数组 relation。返回信息从小 A (编号 0 ) 经过 k 轮传递到编号为 n-1 的小伙伴处的方案数；
 * 若不能到达，返回 0。
 * 
 * 输入：n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3
 * 输出：3
 * 解释：信息从小 A 编号 0 处开始，经 3 轮传递，到达编号 4。共有 3 种方案，分别是 0->2->0->4， 0->2->1->4， 0->2->3->4。
 * 
 * 输入：n = 3, relation = [[0,2],[2,1]], k = 2
 * 输出：0
 * 解释：信息不能从小 A 处经过 2 轮传递到编号 2
 * 
 */
// 本题最容易想到的应该是bfs遍历的思路，但是本题使用bfs遍历会存在大量的重叠子元素
// 而且只是求一个总数，所以可以使用动态规划的思路来解答
// dp[k][n]代表信息传递到第k轮中编号为n的小伙伴时有几种方案数
var numWays = function(n, relation, k) {
  // 初始化dp
  const dp = new Array(k + 1).fill(0).map(v => new Array(n).fill(0));
  // 第0轮，信息传递到编号为0的小伙伴时（其实就是起始点），方案数为1
  // 编号大于0的小伙伴，方案数都为0
  dp[0][0] = 1;
  // 遍历
  for (let i = 0; i < k; i ++) {
    // 遍历信息传递关系的二维数组
    for (let [start, end] of relation) {
      // 核心状态转移方程
      dp[i + 1][end] += dp[i][start];
    }
  }
  return dp[k][n - 1];
};