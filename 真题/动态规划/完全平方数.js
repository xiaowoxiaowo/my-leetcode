/***
 * leetcode 279
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
 * 
 * 给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
 * 
 * 完全平方数 是一个整数，其值等于另一个整数的平方；
 * 换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
 * 
 * 
 * 例1：
 * 输入：n = 12
 * 输出: 3
 * 12 = 4 + 4 + 4
 * 
 * 输入：n = 13
 * 输出：2
 * 解释：13 = 4 + 9
 * 
 * 解题思路：
 * 动态规划
 */
 var numSquares = function(n) {
  // 初始化dp数组，每个数组里存的值都是该值的最小完全平方数
  const dp = new Array(n + 1).fill(0);
  for (let i = 1; i <= n; i++) {
    // 先存储最坏的情况，即都是由1组成，数量即为自身的值
    dp[i] = i;
    // 遍历小于自身的所有平方值，1,4,9,16...
    for (let j = 1; i - j * j >= 0; j++) {
      // 动态转移方程
      // 取 最坏的情况 和 dp[i - j * j] + 1
      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
    }
  }
  return dp[n];
};

 
console.log(numSquares(12));
console.log(numSquares(13));