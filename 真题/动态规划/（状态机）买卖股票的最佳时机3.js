/***
 * leetcode 123
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 
 */

// 动态规划，状态机思路，可以定义四个状态，完成一次买，完成一次买卖，完成一次买卖之后完成第二次买，完成两次买卖
var maxProfit = function(prices) {
  const len = prices.length;
  if (len < 2) return 0;
  let dp = [-prices[0], 0, -prices[0], 0];
  for (let i = 1; i < len; i ++) {
    const [buy1, sale1, buy2, sale2] = dp;
    // 完成一次买，对于当前节点，可以买，也可以不买，取较大值
    dp[0] = Math.max(buy1, -prices[i]);
    // 完成一次买卖，可以卖，也可以不卖，取较大值
    dp[1] = Math.max(sale1, buy1 + prices[i]);
    // 完成一次买卖之后完成第二次买，可以买，也可以不买，取较大值
    dp[2] = Math.max(buy2, sale1 - prices[i]);
    // 完成两次买卖,可以卖，也可以不卖，取较大值
    dp[3] = Math.max(sale2, buy2 + prices[i]);
  }
  return dp[3];
};


console.log(maxProfit([3,3,5,0,0,3,1,4]));