/***
 * leetcode 376
 * 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。
 * 第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。
 * 
 * 例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。
 * 相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，
 * 第二个序列是因为它的最后一个差值为零。
 * 
 * 给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，
 * 剩下的元素保持其原始顺序。
 * 
 * 例1：
 * 输入：[1,7,4,9,2,5]
 * 输出：6
 * 解释：整个序列均为摆动序列。
 * 
 * 输入：[1,17,5,10,13,15,10,5,16,8]
 * 输出：7
 * 解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。
 * 
 * 输入：[1,2,3,4,5,6,7,8,9]
 * 输出：2
 * 
 * 进阶:
 * 你能否用 O(n) 时间复杂度完成此题?
 * 
 * 
 */

// 动态规划思路
// up[i] 表示以前 i 个元素中的某一个为结尾的最长的「上升摆动序列」的长度。
// down[i] 表示以前 i 个元素中的某一个为结尾的最长的「下降摆动序列」的长度。
// 这里的up和down其实就是用来记录，相应节点的区间，上一个状态是上升或者下降的长度
var wiggleMaxLength = function(nums) {
	const n = nums.length;
	if (n < 2) return n;
	const up = new Array(n).fill(0);
	const down = new Array(n).fill(0);
	up[0] = down[0] = 1;
	for (let i = 1; i < n; i ++) {
		if (nums[i] > nums[i - 1]) {
			// 当前节点与上个节点的状态是上升
			// 当前节点的up需要取上一个节点的最长上升长度以及上一个节点的最长下降长度+1中的较大值
			up[i] = Math.max(up[i - 1], down[i - 1] + 1);
			// 因为是上升，所以当前节点的下降节点直接取前一个值
			down[i] = down[i - 1];
		} else if (nums[i] < nums[i - 1]) {
			up[i] = up[i - 1];
			down[i] = Math.max(up[i - 1] + 1, down[i - 1]);
		} else {
			up[i] = up[i - 1];
			down[i] = down[i - 1];
		}
	}
}

// 贪心,感觉很难想到
// 依次遍历，每次都判断nums[i] - nums[i - 1]的值是否跟上一对相差值是正和负的
// 如果是则给结果值加1即可
// 代码很简单，重点在于贪心的思路
// 重点在于寻找波峰波谷的思路
// 先设置前两位的初始化
// 然后每次都是比较是否符合正负，重点在于在符合正负之外的这些过渡元素的处理
// 比如上一个状态是上升的，即nums[i - 1] - nums[i - 2] > 0
// 如果当前状态nums[i] - nums[i - 1] < 0，那自然是符合正负，结果加1
// 但是如果当前状态nums[i] - nums[i - 1] > 0，说明当前的元素跟上一个元素比依然是上升的
// 我们的波峰就可以被替换成这个新的值
// 然后我们下一次遍历其实就是使用i + 1 跟 i的比较，其实就是跟这个新的波峰的比较。
// 波谷的状态也是同理，自然就能使用贪心得出结果。
var wiggleMaxLength = function(nums) {	
  const n = nums.length;
  if (n < 2) return n;
  let prevdiff = nums[1] - nums[0];
  let ret = prevdiff !== 0 ? 2 : 1;
  for (let i = 2; i < n; i++) {
    const diff = nums[i] - nums[i - 1];
    if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {
      ret++;
      prevdiff = diff;
    }
  }
  return ret;
};