/***
 * leetcode 62
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
 * 问总共有多少条不同的路径？
 * 
 * 
 * 例1：
 * 输入：m = 3, n = 7
 * 输出：28
 * 
 * 输入：m = 3, n = 2
 * 输出：3
 * 
 * 输入：m = 7, n = 3
 * 输出：28
 * 
 * 输入：m = 3, n = 3
 * 输出：6
 * 
 * 解题思路：
 * 如果使用递归，会有很多重复的计算，所以应该使用动态规划的思路。这里的解题思路也需要一定的数学思想。
 * 比如一个3X3的二维数组，初始化可以设为如下
 * 1 1 1
 * 1 0 0
 * 1 0 0
 * 我们需要求从左上角到右下角的路线条数，x为0的节点，或者y为0的节点，相应的路线条数都可以设为1。
 * 因为只能右或下，其实这里的每一个点的路线条数，就是上节点加左节点的值。
 * 遍历这些节点，每个节点都赋值上节点加左节点的值，直到求出最右下角的节点值，就是我们需要求的解
 */
var uniquePaths = function(m, n) {
  let path = [];
  for (let i = 0; i < m; i ++) {
    if (i === 0) {
      path.push(new Array(n).fill(1));
    } else {
      path.push(new Array(n).fill(0));
      path[i][0] = 1;
    }
  }
  for (let i = 1; i < m; i ++) {
    for(let j = 1; j < n; j ++) {
      path[i][j] = path[i - 1][j] + path[i][j - 1];
    }
	}
  return path[m - 1][n - 1];
};
