/***
 * leetcode 509
 * 斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，
 * 后面的每一项数字都是前面两项数字的和，也就是
 * F(0) = 0，F(1) = 1
 * F(n) = F(n - 1) + F(n - 2)，其中 n > 1
 * 
 * 给你 n ，请计算 F(n) 。0 <= n <= 30
 * 
 * 
 * 例1：
 * 输入：2
 * 输出：1
 * 
 * 输入：3
 * 输出：2
 * 
 * 解题思路：
 * 递归的思路，但是单纯的递归，会存在非常多的重复计算，所以可以记录那些已经被计算过的值，增加性能。
 */
// 缓存数组，记忆化搜索
let cache = [];
var fib = function(n) {
  if (n === 0) return 0;
  if (n === 1) return 1;
  // 如果当前值没有被计算过，重新计算。
  // 如果当前值已经被计算过了，直接返回缓存结果
  if (!cache[n]) cache[n] = fib(n - 1) + fib(n - 2);
  return cache[n];
};


// 第二种解法，动态规划，自下而上的解决问题，没有递归调用，会比上面的方法性能更好一些
// 先解决小数据量下的问题，再向上解决大数据量上的问题
var fib = function(n) {
  let cache = [];
  cache[0] = 0;
  cache[1] = 1;
  for (let i = 2; i <= n; i ++) {
    cache[i] = cache[i - 1] + cache[i - 2];
  }
  return cache[n];
};

// 动态规划
// 将原问题拆解成若干子问题，同时保存子问题的答案，使得每个子问题只求解一次，最终获得原问题的答案。