/***
 * leetcode 122
 * 给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 
 * 输入: prices = [7,1,5,3,6,4]
 * 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 * 
 * 输入: prices = [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 */

// 动态规划，状态机思路
var maxProfit = function(prices) {
  const len = prices.length;
  if (len < 2) return 0;
  // dp为一个二维数组，定义为[0...i]区间里，[最小买入值，最大卖出值]
  let dp = [-prices[0], 0];
  // 将买入值设为负数，便于后续操作
  for (let i = 1; i < len; i ++) {
    const [maxIn, maxOut] = dp;
    // 设置当前节点的最大卖出值
    // 对于每个节点，可以卖，可以不卖。所以取 前一个节点的最大卖出值 和 前一个节点的最小买入值 + 卖出当前节点 的较大值
    dp[1] = Math.max(maxOut, maxIn + prices[i]);
    // 设置当前节点的最小卖出值
    // 对于每个节点，可以买，可以不买。所以取 前一个节点的最小买入值 和 前一个节点的最大卖出值 - 买入当前节点 的较大值
    dp[0] = Math.max(maxIn, maxOut - prices[i]);
  }
  return dp[1];
};

console.log(maxProfit([1,2,3,4,5]));