/***
 * leetcode 91
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。
 * 例如，"111" 可以将 "1" 中的每个 "1" 映射为 "A" ，从而得到 "AAA" ，
 * 或者可以将 "11" 和 "1"（分别为 "K" 和 "A" ）映射为 "KA" 。
 * 注意，"06" 不能映射为 "F" ，因为 "6" 和 "06" 不同。
 * 
 * 给你一个只含数字的 非空 字符串 num ，请计算并返回 解码 方法的 总数
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * 
 * 例1：
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * 
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * 
 * 输入：s = "0"
 * 输出：0
 * 
 * 输入：s = "06"
 * 输出：0
 * 
 * 解题思路：
 * 本题是一道斐波那契数列的复杂题，重点在于各种边界条件的处理
 */
var numDecodings = function(s) {
  if(s[0] === '0') return 0;
  // dp里的数据，第i个点，代表s中[0, i - 1]的字符串的解码方法数
  let dp = [1, 1], len = s.length;
  for(let i = 1; i < len; i ++) {
    if(s[i - 1] !== '0') {
			// 如果前一位不为0
      let num = (s[i - 1] + s[i] | 0);
      if(num >= 1 && num <= 26) {
				// 如果i + 1和i组成的数字符合字母对应，而且i不为0，则使用斐波那契数列计算法
				// 如果i为0，当前的解法应该跟i - 1即当前10或者20这两个数之前的一个数的解法一致（因为10，20的解法是固定组合）
        dp[i + 1] = s[i] != "0"? dp[i - 1] + dp[i]: dp[i - 1];
      } else if(s[i] != "0") {
				// 如果不满足字母对应，但是i的数字不为0
				// 说明这数字无法组合起来作为一个解法，所以，当前的解法跟i的数字是一致的
        dp[i + 1] = dp[i];
      } else {
				// 如果不满足字母对应，而且i的数组为0
				// 无解
        return 0;
      }
    } else if(s[i] != "0") {
			// 如果前一位为0，i不为0。解法也是不会新增的，跟i一致
      dp[i + 1] = dp[i];
    } else {
			// 连续两个值都为0，无解
      return 0;
    }
  }
  return dp[len];
};

// console.log(numDecodings('10'));
// console.log(numDecodings('100'));
// console.log(numDecodings('226'));
// console.log(numDecodings('12'));
// console.log(numDecodings("2101"));
console.log(numDecodings('1123'));