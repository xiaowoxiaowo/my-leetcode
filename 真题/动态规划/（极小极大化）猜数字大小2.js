/***
 * leetcode 375. 猜数字大小 II
 * 
 * 我们正在玩一个猜数游戏，游戏规则如下：
 * 我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。
 * 每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。
 * 然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。
 * 
 * n = 10, 我选择了8.
 * 第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
 * 第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
 * 第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。
 * 
 * 游戏结束。8 就是我选的数字。
 * 你最终要支付 5 + 7 + 9 = 21 块钱。
 * 
 * 给定 n ≥ 1，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。
 * 
 */
// 动态规划，极小极大化算法问题
// 这里一定要注意二分法只能求最小的解答步骤，但是并不是最优的解题策略
// 这里定义dp为一个二维数组，dp[i][j]表示依次以从i到j的数字作为分割点(猜的数)，必定赢得游戏所用钱的最小值,下面举几个例子
// dp[1][1]，只有一个数字1，可以直接猜到，不用花钱，所以值为0
// dp[1][2]，这里的分割点（猜的数）有两种情况
// 如果猜1，答案为1的话，花费0。答案为2的话，花费1，最多花费1元
// 如果猜2，答案为1的话，花费2。答案为2的话，花费0，最多花费2元
// 所以这里dp[1][2] = Math.min(1,2) = 1
// dp[1][3]，这里的分割点有三种
// 如果分割点取两端1或3, 1 + dp[2][3]或3 + dp[1][2]
// 如果分割点在中间,为2 Math.max(dp[1][1], dp[3][3]) + 2
// dp[1][3]取这所有情况里的最小值
// 大致思路如上，实际计算还需要考虑动态规划的计算顺序，按照从长度为1...n的范围去进行计算
var getMoneyAmount = function(n) { 
  if (n === 1) return 0;
  // 初始化dp，二维数组
  let dp = new Array(n + 1).fill(0).map(() => new Array(n + 1).fill(Infinity));
  // 给所有长度为1的dp赋值，因为只有一个数字，所以花费为0
  for (let i = 0; i <= n; i ++) {
    dp[i][i] = 0;
  }
  // 从dp[1][2], dp[2][3], dp[1][3], dp[3][4]...dp[1][n]这样的顺序进行遍历
  for (let j = 2; j <= n; j ++) {
    for (let i = j - 1; i >= 1; i --) {
      // 只遍历k处于i和j中间的情况
      for (let k = i + 1; k < j; k ++) {
        dp[i][j] = Math.min(dp[i][j], Math.max(dp[i][k - 1], dp[k + 1][j]) + k);
      }
      // k处于两端，即k === i 或k === j的情况
      dp[i][j] = Math.min(dp[i][j], i + dp[i + 1][j]);
      dp[i][j] = Math.min(dp[i][j], j + dp[i][j - 1]);
    }
  }
  return dp[1][n];
}