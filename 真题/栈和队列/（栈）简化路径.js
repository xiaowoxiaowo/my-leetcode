/***
 * leetcode 71
 * 给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 '/' 开头），请你将其转化为更加简洁的规范路径。
 * 
 * 在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；
 * 两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，'//'）都被视为单个斜杠 '/' 。 
 * 对于此问题，任何其他格式的点（例如，'...'）均被视为文件/目录名称。
 * 
 * 必须遵循下述格式：
 * 1.始终以斜杠 '/' 开头。
 * 2.两个目录名之间必须只有一个斜杠 '/' 。
 * 3.最后一个目录名（如果存在）不能 以 '/' 结尾。
 * 4.此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 '.' 或 '..'）。
 * 
 * 例1：
 * 输入: path = "/home/"
 * 输出: "/home"
 * 解释: 注意，最后一个目录名后面没有斜杠。 
 * 
 * 例2：
 * 输入: path = "/../"
 * 输出: "/"
 * 解释: 从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。
 * 
 * 例3：
 * 输入: path = "/home//foo/"
 * 输出: "/home/foo"
 * 解释: 在规范路径中，多个连续斜杠需要用一个斜杠替换。
 * 
 * 例4：
 * 输入: path = "/a/./b/../../c/"
 * 输出: "/c"
 * 
 * 解题思路：
 * 栈的思路，将字符串用 / 断开成数组，然后只需要判断数组中的数据是'.'  ''  '..'的情况，最后记得在结果字符串前面加 /。
 * PS：直接判断 / 之间的字符串，千万不要一个字符一个字符去判断，本人犯傻，用这种思路搞了1个半小时，疯狂调试。后来，改为字符串去判断，
 * 几分钟就解出来了。忍不住觉得自己太蠢。
 * 
 */

var simplifyPath = function(path) {
  // 用 / 分割字符
  let stack = [], arr = path.split('/');
  for (let i = 0; i < arr.length; i ++) {
    // 处理 ./ 以及多个 / 的情况
    if (arr[i] === '.' || arr[i] === '') continue;
    // 处理 ../的情况,需要返回上级，也就是pop一下
    if (arr[i] === '..') {
      stack.pop();
      continue;
    }
    // 其他的情况，推入栈
    stack.push(arr[i]);
  }
  // 还原成字符串格式
  return `/${stack.join('/')}`;
};
