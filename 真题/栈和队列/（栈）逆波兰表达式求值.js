/***
 * leetcode 150
 * 根据 逆波兰表示法，求表达式的值。
 * 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
 * 
 * 整数除法只保留整数部分。
 * 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 * 
 * 例1：
 * 输入: ["2", "1", "+", "3", "*"]
 * 输出: 9
 * 解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
 * 
 * 例2：
 * 输入: ["4", "13", "5", "/", "+"]
 * 输出: 6
 * 解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
 * 
 * 解题思路：
 * 栈的思路，碰到计算符号，从栈中取出前两个数字，进行运算。运算完成之后，重新推入栈，直到得到最终的值。
 */

var evalRPN = function(tokens) {
  let stack = [], left, right;
  for (let i = 0; i < tokens.length; i ++) {
    // 判断是否是数字(注意负数的情况)
    if (/^(-)*[0-9]+$/.test(tokens[i])) {
      stack.push(tokens[i]);
    } else {
      right = stack.pop();
      left = stack.pop();
      // 使用eval减少代码量，注意这里一定要把三个值空开，不然减负数的时候会报错。
      // 使用parseInt去除后面的小数值
      let res = parseInt(eval(`${left} ${tokens[i]} ${right}`));
      // parseInt去除负数小数需要处理-0的情况，把-0转成0
      stack.push(res === 0 ? 0 : res);
    }
  }
  return stack[0];
};

console.log(evalRPN(["4","-2","/","2","-3","-","-"]));


