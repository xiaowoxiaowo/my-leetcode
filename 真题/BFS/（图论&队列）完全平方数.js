/***
 * leetcode 279
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
 * 
 * 给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
 * 
 * 完全平方数 是一个整数，其值等于另一个整数的平方；
 * 换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
 * 
 * 
 * 例1：
 * 输入：n = 12
 * 输出: 3
 * 12 = 4 + 4 + 4
 * 
 * 输入：n = 13
 * 输出：2
 * 解释：13 = 4 + 9
 * 
 * 解题思路：
 * 运用图论的思路，使用BFS（广度优先遍历）的方法。从n到0，每个数字表示一个节点。
 * 如果两个数字相差一个完全平方数，则连接一条边。我们就可以得到一个无权图
 * 问题就会转化成，求这个无权图中从n到0的最短路径
 */

var numSquares = function(n) {
	let queue = [], visited = {};
	// 初始化队列
	queue.push({ step: 0, num: n });
	while(queue.length) {
		let { step, num } = queue.shift();
		for(let i = 1;;i ++) {
			let res = num - i * i;
			// 只需要计算i的平方小于num的情况
			if (res < 0) break;
			// 如果num - i * i为0，说明找到了相应的解，直接返回step + 1
			if (res === 0) return step + 1;
			// 因为是图论的思路，有许多重复的点，所以需要一个变量来控制，如果访问过相应的数据，则不需要再重复填入队列
			if (!visited[res]) {
				queue.push({ step: step + 1, num: res });
				visited[res] = true;
			}
		}
	}
};