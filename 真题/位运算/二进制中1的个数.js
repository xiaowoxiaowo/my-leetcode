/***
 * 剑指 Offer 15. 二进制中1的个数
 * 
 * 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。
 * 例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 * 
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 
 * 说明：
 * 输入必须是长度为 32 的 二进制串 。
 */
// 暴力解法，比较所有的32个位置的值
var hammingWeight = function(n) {
  let ret = 0;
  for (let i = 0; i < 32; i++) {
      if ((n & (1 << i)) !== 0) {
          ret++;
      }
  }
  return ret;
};

// 位运算优化法,每次进行n & n -1
// 举个例子，比如存在一个二进制数 1111
// 1111 & 1110(1111 - 1) = 1110
// 1110 & 1101(1110 - 1) = 1100
// 1100 & 1011(1100 - 1) = 1000
// 1000 & 0111(1000 - 1) = 0000
// 每次 & 清除的值，都是当前的最低位的1，一次循环就代表存在一个1
// 时间复杂度为1的个数
var hammingWeight = function(n) {
  let ret = 0;
  while(n) {
    n = n & n - 1;
    ret ++;
  }
  return ret;
};

console.log(hammingWeight(11111111111111111111111111111101));